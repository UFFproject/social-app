generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid(7)) @db.Uuid
  email    String  @unique @db.VarChar(100)
  password String  @default("changeme") @db.VarChar(255)
  address  String  @default("Unknown") @db.Text
  isActive Boolean @default(true)

  profile Profile?

  sentInvites         FriendInvite[]        @relation("SentInvites")
  receivedInvites     FriendInvite[]        @relation("ReceivedInvites")
  ChatUser            ChatUser[]
  Message             Message[]
  ReactionForMessages ReactionForMessages[]

  @@map("users")
}

model Profile {
  id           String   @id @default(uuid(7)) @db.Uuid
  name         String?
  surname      String?
  dateOfBirth  DateTime
  gender       String
  nationality  String   @default("Unknown") @db.Text
  fieldOfStudy String   @default("Unknown") @db.Text
  yearOfStudy  Int
  languages    String   @default("Unknown") @db.Text
  relationship String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  @@map("profiles")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FriendInvite {
  id         String       @id @default(uuid(7)) @db.Uuid
  senderId   String
  receiverId String
  isAccepted InviteStatus @default(PENDING)
  sentAt     DateTime     @default(now())

  sender   User @relation("SentInvites", fields: [senderId], references: [id])
  receiver User @relation("ReceivedInvites", fields: [receiverId], references: [id])

  @@map("friend_invites")
}

enum ChatType {
  PRIVATE
  GROUP
  BROADCAST
}

model Chat {
  id        String     @id @default(uuid(7)) @db.Uuid
  title     String     @db.VarChar(255)
  createdAt DateTime   @default(now())
  deletedAt DateTime?
  type      ChatType
  ChatUser  ChatUser[]
  Message   Message[]

  @@map("chats")
}

model ChatUser {
  userId             String
  chatId             String
  permissionBitfield BigInt

  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])

  @@id([userId, chatId])
  @@map("chat_users")
}

model Message {
  id        String    @id @default(uuid(7)) @db.Uuid
  chatId    String
  userId    String
  content   String    @db.VarChar(1000)
  deletedAt DateTime?
  updatedAt DateTime  @updatedAt
  seenAt    DateTime?

  chat                Chat                  @relation(fields: [chatId], references: [id])
  user                User                  @relation(fields: [userId], references: [id])
  ReactionForMessages ReactionForMessages[]

  @@map("messages")
}

enum ReactionType {
  LIKE
  DISLIKE
}

model ReactionForMessages {
  userId    String
  messageId String
  type      ReactionType

  user    User    @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@id([userId, messageId, type])
  @@map("reaction_for_messages")
}
